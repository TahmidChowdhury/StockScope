#!/bin/bash

# StockScope Pro - Manual Smoke Test Script
# This script helps you manually verify all key functionality

echo "üß™ StockScope Pro - Smoke Test Guide"
echo "====================================="
echo ""

# Color codes for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Load environment variables from .env file
if [ -f .env ]; then
    export $(grep -v '^#' .env | xargs)
    echo -e "${BLUE}üìÑ Loaded environment variables from .env${NC}"
else
    echo -e "${RED}‚ùå .env file not found${NC}"
    echo "Please create a .env file with your password configuration"
    exit 1
fi

# Get password from environment variables
if [ -n "$ADMIN_PASSWORD" ]; then
    ENV_PASSWORD="$ADMIN_PASSWORD"
    PASSWORD_TYPE="ADMIN_PASSWORD"
elif [ -n "$STOCKSCOPE_PASSWORD" ]; then
    ENV_PASSWORD="$STOCKSCOPE_PASSWORD"
    PASSWORD_TYPE="STOCKSCOPE_PASSWORD"
else
    echo -e "${RED}‚ùå No password found in .env file${NC}"
    echo "Please set ADMIN_PASSWORD or STOCKSCOPE_PASSWORD in your .env file"
    exit 1
fi

echo -e "${GREEN}üîë Using $PASSWORD_TYPE from .env${NC}"
echo ""

echo -e "${BLUE}üìã SMOKE TEST CHECKLIST${NC}"
echo "Follow this checklist to verify all functionality works correctly:"
echo ""

echo -e "${YELLOW}üöÄ STEP 1: Environment Setup${NC}"
echo "‚ñ° Backend server is running (uvicorn on port 8000)"
echo "‚ñ° Frontend is running (Next.js on port 3000)"
echo "‚ñ° Virtual environment is activated"
echo ""

echo -e "${YELLOW}üîê STEP 2: Authentication${NC}"
echo "‚ñ° Navigate to http://localhost:3000"
echo "‚ñ° Login page appears with password field"
echo "‚ñ° Try wrong password - should show error"
echo -e "‚ñ° Enter correct password: ${GREEN}'$ENV_PASSWORD'${NC}"
echo "‚ñ° Should redirect to main dashboard"
echo "‚ñ° Green 'Secure Session Active' indicator visible"
echo ""

echo -e "${YELLOW}üîç STEP 3: Stock Search${NC}"
echo "‚ñ° Search box appears with autocomplete"
echo "‚ñ° Type 'APP' - should suggest Apple Inc. (AAPL)"
echo "‚ñ° Type 'GOOG' - should suggest Alphabet Inc. (GOOGL)"
echo "‚ñ° Try invalid symbol like 'INVALID123' - should handle gracefully"
echo "‚ñ° Select a valid stock from suggestions"
echo ""

echo -e "${YELLOW}üìä STEP 4: Portfolio View${NC}"
echo "‚ñ° Portfolio section shows analyzed stocks (AAPL, GOOGL, MSFT)"
echo "‚ñ° Each stock card shows:"
echo "  - Stock symbol (e.g., AAPL)"
echo "  - Company name (e.g., Apple Inc.)"
echo "  - Current price (e.g., \$150.25)"
echo "  - Price change with arrows (e.g., ‚Üó +\$2.50 (+1.7%))"
echo "  - Sentiment indicator (üìà Sentiment: 8%)"
echo "‚ñ° Price changes show correct colors (green=up, red=down)"
echo "‚ñ° Hover effects work on stock cards"
echo ""

echo -e "${YELLOW}üìà STEP 5: Stock Dashboard${NC}"
echo "‚ñ° Click on a stock (e.g., GOOGL) to view dashboard"
echo "‚ñ° Dashboard loads without infinite API calls"
echo "‚ñ° Key metrics display correctly:"
echo "  - Total Posts count"
echo "  - Average Sentiment"
echo "  - Reddit Posts count"
echo "  - News Articles count"
echo "‚ñ° Charts render properly:"
echo "  - Pie chart for data sources"
echo "  - Bar chart for source breakdown"
echo "‚ñ° Source details table shows data by source"
echo "‚ñ° Quick Actions buttons are visible"
echo ""

echo -e "${YELLOW}ü§ñ STEP 6: AI Features${NC}"
echo "‚ñ° Click 'Get Investment Advice' button"
echo "‚ñ° Modal opens with recommendation (BUY/SELL/HOLD)"
echo "‚ñ° Shows confidence score and reasoning"
echo "‚ñ° Click 'View Detailed Analysis' button"
echo "‚ñ° Quantitative analysis modal opens"
echo "‚ñ° Click 'Recent News & Posts' button"
echo "‚ñ° News modal shows aggregated data"
echo ""

echo -e "${YELLOW}üîÑ STEP 7: Real-time Features${NC}"
echo "‚ñ° Click 'Refresh' button - data updates"
echo "‚ñ° Portfolio refreshes every 30 seconds automatically"
echo "‚ñ° No infinite API calls in browser dev tools"
echo "‚ñ° Backend logs show reasonable API call frequency"
echo ""

echo -e "${YELLOW}üóëÔ∏è STEP 8: Management Features${NC}"
echo "‚ñ° Click 'Manage Portfolio' button"
echo "‚ñ° Selection mode activates"
echo "‚ñ° Select multiple stocks"
echo "‚ñ° 'Delete Selected' button appears"
echo "‚ñ° Cancel selection mode works"
echo "‚ñ° Individual delete buttons work on hover"
echo ""

echo -e "${YELLOW}üö™ STEP 9: Logout & Navigation${NC}"
echo "‚ñ° Click 'Logout' button"
echo "‚ñ° Returns to login screen"
echo "‚ñ° Session data cleared"
echo "‚ñ° Back button from dashboard works"
echo "‚ñ° Navigation between views is smooth"
echo ""

echo -e "${YELLOW}‚ö° STEP 10: Performance${NC}"
echo "‚ñ° Pages load quickly (< 2 seconds)"
echo "‚ñ° No console errors in browser"
echo "‚ñ° Backend responds promptly"
echo "‚ñ° Memory usage stays reasonable"
echo "‚ñ° No memory leaks after navigation"
echo ""

echo ""
echo -e "${GREEN}‚úÖ EXPECTED RESULTS${NC}"
echo "If all checkboxes pass, the smoke test is successful!"
echo ""

echo -e "${RED}‚ùå COMMON ISSUES TO WATCH FOR${NC}"
echo "‚Ä¢ Infinite API calls (check browser network tab)"
echo "‚Ä¢ Timezone errors in backend logs"
echo "‚Ä¢ Missing price data (should show fallback)"
echo "‚Ä¢ Broken authentication flow"
echo "‚Ä¢ UI elements not responding"
echo "‚Ä¢ Console errors in browser dev tools"
echo ""

echo -e "${BLUE}üêõ DEBUGGING TIPS${NC}"
echo "‚Ä¢ Check browser console (F12) for errors"
echo "‚Ä¢ Monitor backend logs for API errors"
echo "‚Ä¢ Verify network requests in dev tools"
echo "‚Ä¢ Check localStorage for auth tokens"
echo "‚Ä¢ Ensure all dependencies are installed"
echo ""

echo -e "${GREEN}üéØ QUICK AUTOMATED CHECKS${NC}"
echo "Run these commands to verify setup:"
echo ""

# Backend health check
echo -e "${YELLOW}Backend Health Check:${NC}"
echo "curl -s http://localhost:8000/ | jq ."
echo ""

# API endpoint test  
echo -e "${YELLOW}Test API with Authentication:${NC}"
ENCODED_PASSWORD=$(echo -n "$ENV_PASSWORD" | python3 -c "import urllib.parse; print(urllib.parse.quote(input()))" 2>/dev/null || echo "$ENV_PASSWORD")
echo "curl -s \"http://localhost:8000/api/stocks?password=$ENCODED_PASSWORD\" | jq '.count'"
echo ""

# Frontend check
echo -e "${YELLOW}Frontend Accessibility:${NC}"
echo "curl -s http://localhost:3000 | grep -o '<title>.*</title>'"
echo ""

echo -e "${GREEN}üìù TEST EXECUTION LOG${NC}"
echo "Copy this template to track your test results:"
echo ""
echo "Date: $(date)"
echo "Tester: [Your Name]"
echo "Environment: macOS"
echo "Password Type: $PASSWORD_TYPE"
echo ""
echo "‚úÖ Authentication: PASS/FAIL"
echo "‚úÖ Stock Search: PASS/FAIL"
echo "‚úÖ Portfolio Display: PASS/FAIL"
echo "‚úÖ Dashboard Navigation: PASS/FAIL"
echo "‚úÖ AI Features: PASS/FAIL"
echo "‚úÖ Real-time Updates: PASS/FAIL"
echo "‚úÖ Management Tools: PASS/FAIL"
echo "‚úÖ Performance: PASS/FAIL"
echo ""
echo "Notes:"
echo "- [Any issues found]"
echo "- [Performance observations]"
echo "- [Suggestions for improvement]"
echo ""

echo -e "${BLUE}üöÄ Ready to start smoke testing!${NC}"
echo "Open http://localhost:3000 and follow the checklist above."
echo ""